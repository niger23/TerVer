from scipy import stats
import numpy as np
import math

def str_v (arr):
    mean = sum(arr)/len(arr)
    sum_up = 0
    for i in arr:
        sum_up += pow(i - mean, 2)
    s = sum_up/(len(arr))
    return math.sqrt(s)
print("Задача 1\n")
print("""Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
Полученные значения должны быть равны.
Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков, а затем с использованием функций из библиотек numpy и pandas.\n""")
zp=np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks=np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
cov_1 = sum(zp*ks)/len(zp) - (sum(zp)/len(zp))*(sum(ks)/len(ks))
print(f"Ковариация вручную: {cov_1}")
print(f"Функция: {np.cov(zp,ks,ddof=0)}")
r = cov_1/(str_v(zp)*str_v(ks))
print(f"Корреляция вручную: {r}")
print(f"Функция: {np.corrcoef(zp,ks)}")

print("\nЗадача 2\n")
print("""Измерены значения IQ выборки студентов,
обучающихся в местных технических вузах:
131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
Известно, что в генеральной совокупности IQ распределен нормально.
Найдите доверительный интервал для математического ожидания с надежностью 0.95.\n""")
arr = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]
t = stats.t.ppf(0.975, len(arr) - 1)
mean = sum(arr)/len(arr)
sum_up = 0
for i in arr:
    sum_up += pow(i - mean, 2)
d = sum_up/(len(arr)-1)
left_value = mean - t*math.sqrt(d/len(arr))
right_value = mean + t*math.sqrt(d/len(arr))

print(f"Результат: [ {left_value:.2f} ; {right_value:.2f} ]\n")

print("Задача 3\n")
print("""Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2. Найдите доверительный интервал для математического ожидания с надежностью 0.95.\n""")

m = 174.2
n = 27
str = math.sqrt(25)
z = stats.norm.ppf(0.975)

left_value = m - (z*str/math.sqrt(n))
right_value = m + (z*str/math.sqrt(n))

print(f"Результат: [ {left_value:.2f} ; {right_value:.2f} ]\n")
